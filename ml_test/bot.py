import random


# This is an example bot written by the developers!
# Use this to help write your own code, or run it against your bot to see how well you can do!

board_size = 16
team = None
opp_team = None
robottype = None
backRow = 0
row, col = 0,0

#PAWN

sensor_radius = 2

#OVERLORD
pawn_bias_L1 =[-8.255009, -2.367078, 8.484841, 6.797371, 2.683816, -9.951864, 1.924888, -7.717334, -8.627664, -8.095839, 9.195387, -0.027412, -2.438888, 0.229577, -3.035216, 5.192896, -1.990061, -3.671065, 0.450475, 6.353337]
pawn_bias_L2 =[-10.722479, -0.036527]
pawn_weights_L2 =[[3.869202, -1.237719], [-1.751904, -7.973174], [8.487341, 4.774832], [25.11915, -11.059416], [1.085793, 1.878378], [-7.178842, 6.924129], [7.563788, -4.214787], [-1.474775, 0.978506], [0.850427, 6.739044], [-4.430465, 6.509313], [-4.035524, 0.248222], [-2.165107, -1.437381], [-4.147391, -0.0896], [-0.819765, 1.264429], [3.878126, 4.838519], [0.22196, 5.227545], [-0.562051, 8.044185], [-1.132366, -2.834208], [-10.922042, -7.293736], [-0.334695, -4.012889]]
overlord_weights_same_allied =[[-2.886848, 1.869515, -1.142696, 4.816548, 3.735821, 4.908021, -2.935498, -5.134481, 3.834305, -0.219638, 6.760162, 3.100437, -5.37806, -1.545065, 6.351601, -10.201956], [-4.980571, -3.820241, -3.122648, -7.721774, -1.042164, -2.535872, 1.25132, -8.690063, -0.919177, -2.418979, -3.207746, -5.715275, 8.151602, 0.556053, -1.788627, -5.020286], [-30.596085, -2.748534, 0.589101, 0.9517, 1.998917, -1.20747, -0.012597, -2.760653, 12.651252, 7.548435, -8.46532, 11.384813, -6.746094, 15.346365, -3.357315, -0.469038]]
overlord_weights_adjacent_allied =[[2.301511, 3.82751, 2.72427, 7.672287, -1.998607, -2.651792, 0.479405, -2.865881, 2.042404, -0.094832, 2.181976, -10.930375, 6.870833, 5.430674, -5.320132, 12.321635], [-2.497384, -3.342203, -7.914516, 6.67736, -1.797159, 8.337113, 9.211286, -2.637057, 5.530873, 2.13029, 6.409719, -7.096344, -7.793387, 7.854969, 3.890907, -4.869284], [4.785406, 7.106513, 5.806168, 10.484979, -10.053657, 2.496242, 0.714266, 1.801534, 3.08949, 0.56542, -1.431765, 4.455534, -1.947234, -5.734183, -9.902414, 13.459006]]
overlord_weights_same_enemy =[[-3.429235, 6.801427, 3.778364, 0.975162, -4.025866, 0.96223, -6.208075, 1.262149, 1.073829, 2.252267, -7.903769, 8.19886, -1.34147, -1.921972, 3.292395, 5.427158], [1.730334, -2.126613, 5.46807, 12.61863, -2.407924, -6.522155, -5.588342, -4.358984, 11.851844, -4.869608, 5.350907, -2.27741, 1.9472, 10.928708, -4.58042, 1.304306], [-7.026026, 3154.111098, -3.583679, 8.454355, 5.193615, 5.271116, 3.843274, 8.582056, 4.300323, -0.46803, 3.331801, -9.18863, 1.137542, -6.005856, -4.320088, 11.682844]]
overlord_weights_adjacent_enemy =[[-6.057882, -8.181435, -1.178866, 7.188476, 5.508616, 2.185381, -14.473316, 5.215483, -0.098815, 11.313738, -2.962729, -7.337, 1.052256, 3.641207, -20.892254, 0.578134], [-10.223361, -5.414329, 4.872702, -6.153951, 2.113332, -1.725032, 1.483111, -9.179357, -4.50097, -7.827229, 3.566389, -3.315368, 3.074996, 1.84736, 10.110393, 4.712237], [3.269458, -12.127667, -5.94424, -5.031257, 4.917175, 7.888315, 7.280576, 5.153506, 4.765811, 5.049847, 0.667169, 3.565749, -6.987365, -6.640238, -2.721537, -5.871504]]

sameRowAlliedPawnWeight = -64
adjacentRowAlliedPawnWeight = 0

sameRowEnemyPawnWeight = 16
adjacentRowEnemyPawnWeight = 16

sameRowAlliedPawnDistanceMultiplier = 1
adjacentRowAlliedPawnDistanceMultiplier = 0

sameRowEnemyPawnDistanceMultiplier = -1
adjacentRowEnemyPawnDistanceMultiplier = -1

enemyOneTileAwayWeight = 1000
enemyTwoTilesAwayWeight = 700
enemyOneAdjacentTileAwayWeight = -500

DEBUG = 1
def dlog(str):
	if DEBUG > 0:
		log(str)



def check_space_wrapper(r, c):
	# check space, except doesn't hit you with game errors
	if r < 0 or c < 0 or c >= board_size or r >= board_size:
		return False
	try:
		return check_space(r, c)
	except:
		return None

def turn():

	if robottype is None:
		init()

	if robottype == RobotType.PAWN:
		pawn_turn()
	else:
		overlord_turn()

	bytecode = get_bytecode()
	dlog('Done! Bytecode left: ' + str(bytecode))

def init():
	global board_size, team, opp_team, robottype, backRow, forward

	board_size = get_board_size()

	team = get_team()

	robottype = get_type()

	if team == Team.WHITE:
		backRow = 0
		forward = 1
		opp_team = Team.BLACK
	else:
		backRow = board_size - 1
		forward = -1
		opp_team = Team.WHITE

	if robottype == RobotType.PAWN:
		pawn_init()
	else:
		overlord_init()

##############################################################
############################ PAWN ############################
##############################################################

def pawn_init():
	return

def dist_to_side(column):
	dist1 = column
	dist2 = board_size-1-column
	return dist1 if dist1 < dist2 else dist2

def check_right():
	return check_space_wrapper(row + forward, col + 1) == opp_team

def check_left():
	return check_space_wrapper(row + forward, col - 1) == opp_team

def check_right2():
	return check_space_wrapper(row + forward*2, col + 1) == opp_team

def check_left2():
	return check_space_wrapper(row + forward*2, col - 1) == opp_team

def check_right_adjacent_ally():
	return check_space_wrapper(row, col + 1) == team

def check_left_adjacent_ally():
	return check_space_wrapper(row, col - 1) == team

def capture_right():
	capture(row + forward, col + 1)

def capture_left():
	capture(row + forward, col - 1)

def can_move_forward():
	return row + forward != -1 and row + forward != board_size and not check_space_wrapper(row + forward, col)

def close_to_enemy_side():
	distance = abs(row-backRow)
	return distance >= board_size-3

def pawn_weights_L1_generator(i):
	pawn_weights_L1=[]
	if i == 0:
		pawn_weights_L1 = [-0.32787, -5.115113, -4.19062, 9.249837, 2.069882, -8.64295, 8.746432, 2.69134, 8.582559, 11.790422, -2.788978, -3.014329, -0.007925, -4.944481, 7.43944, 5.200391, -5.505284, 3.409472, 0.555203, -7.562732, -5.905773, 5.439944, 2.438903, 14.700407, 1.050972, 4.669604, -3.567279, -0.244226, -7.571882, 5.561964, 0.015147, -0.34831, -7.046832, 0.740705, 9.763326, -7.758456, 3.323941, 7.186344,
		-6.719495, -2.875794, -3.675709, -0.806176, -8.651152, 6.626658, -3.869379, 1.123896, -2.191815, -1.59978, 10.900523, -2.780488, -10.229848, -1.032541, -3.382786, 0.497264, 8.132459, -4.396484, 0.372353, -3.867351, -0.101051, -4.230482, -3.498676, 1.138827, -4.715889, 4.263045, -7.53971, -0.134982, -2.679224, -3.656519, -2.971892, 2.958078, 0.181338, 6.061135, -2.243007, 9.382847, -5.378598, 4.684823]
	elif i == 1:
		pawn_weights_L1 = [-0.420395, 3.011608, 6.416857, 26.234432, -9.326041, 8.7255, -4.245004, -4.114211, -2.56765, 4.40751, -2.827818, 1.558148, 1.859547, 2.778367, 1.723322, 3.382021, -7.854994, 2.346219, 7.526609, 7.616672, 1.165133, 0.87253, -9.737949, -6.909484, 2.198457, 2.29572, 5.619398, 5.791969, -8.346931, 7.149887, 3.557261, 1.509013, 2.408788, 5.158645, 2.301592, 4.795301, 2.247814, -4.808902,
		9.481223, -3.907591, 2.876048, 10.683797, 9.687683, 8.64296, 3.626763, -3.368102, 2.346538, -3.870209, 3.535992, 4.006391, 6.369955, 9.648706, 6.962978, 6.536596, -1.754893, -3.258826, -6.905496, 9.954624, 1.872866, 1.322365, 2.128793, 1.846598, -4.657035, 0.963248, 4.847804, 5.591675, -0.321516, -1.946732, -8.965403, -0.174906, 10.881252, 2.763029, 12.064062, -1.679035, 4.106443, -3.978701]
	elif i == 2:
		pawn_weights_L1 = [0.378626, -3.788702, 2.202296, -3.291953, 0.84071, -3.578724, 1.861777, 7.616894, 9.871773, 7.641407, -17.891582, 2.435963, -10.184745, -0.699545, 0.211513, -4.471348, 1.715212, 9.447679, 4.910411, -1.404319, 4.252392, 4.229042, -3.501748, -11.235368, 4.100884, -4.011495, 0.268023, 2.797735, 11.095172, 5.840165, 2.917086, -6.662964, -1.970562, 4.862861, -8.979352, 5.931502, 2.566838, 0.668454,
		0.429433, 7.969485, 9.727621, 1.338004, 1.426068, 3.409074, -2.562705, -8.798668, -6.447148, -8.215468, -7.217556, -2.799146, 7.574099, -2.295853, 2.294404, 4.582932, 7.451873, -8.796477, 2.726011, -3.371769, 1.125962, 8.762485, -17.567712, -3.233768, -2.489697, 0.318013, 2.71477, -8.483648, 0.117554, 0.803976, 1.569393, -0.223132, -11.904725, -5.459917, -1.607143, 7.010445, -9.958838, -3.367242]
	elif i == 3:
		pawn_weights_L1 = [-5.833179, 1.571394, 1.25709, 22.028785, -5.796132, 10.366191, 5.072119, 2.486197, 10.272698, -4.912506, -8.319927, -0.92634, -3.397842, -5.649371, 6.651625, -0.929409, -6.256746, 3.115015, -6.833443, 8.206577, 4.398253, 10.309418, -7.219671, -3.903299, -0.975813, -2.733146, -4.353274, -4.617582, 7.262989, -0.779624, -1.959103, 1.096685, -1.151007, 1.1015, 8.925262, -4.971589, 7.953129, -4.586125,
		-1.688909, -9.257782, -7.464553, 1.81166, 3.282429, -3.270801, -4.798086, 10.075035, -8.820053, -0.449646, 2.991244, -7.900212, 10.49206, -21.448002, 5.099647, 12.458037, 4.34151, 9.47037, -3.598231, -0.509867, 6.606456, 3.238021, -3.196515, 10.617753, 1.205753, 1.863355, -7.633764, -4.810915, -1.75314, -15.651297, 0.068516, 2.817598, 3.969294, 0.347802, -1.719157, 6.113481, -24.753808, -8.366979]
	elif i == 4:
		pawn_weights_L1 = [0.543022, -2.563568, -0.492991, -6.38647, -4.896649, -5.990357, 6.184857, -0.865712, -9.075567, -2.261532, 0.841628, 13.860309, -6.604402, 1.375349, 10.219689, -4.339765, 3.15288, 5.200515, 9.191573, 9.150293, 7.864612, 2.274129, 2.223074, -2.851303, -3.960422, -1.111677, 6.657067, 1.646483, 0.182739, 0.486569, 6.202846, 3.1295, -1.20782, -2.223252, -0.347417, -4.378862, 3.251787, 8.528039,
		-3.105394, -13.602907, 5.058857, -5.020558, 4.66499, -0.316338, -8.418644, 4.50831, -4.780659, -9.825707, 1.395863, 4.530015, -6.112152, -5.182135, 0.049575, -1.368696, -2.947041, 4.283547, 5.68459, 9.248998, 1.288686, 4.995807, -7.982664, 4.393637, -0.599681, 0.414477, 10.006912, 6.024801, 3.56087, 2.214472, 0.485111, -6.040769, -3.822713, -7.011743, -9.634338, 5.188423, 5.638223, -5.37784]
	elif i == 5:
		pawn_weights_L1 = [-6.324165, 3.749676, -5.151196, -1.401678, 0.242972, 0.711866, -9.318302, -7.80883, 5.313072, 1.075799, 1.496027, -4.523214, -7.626737, -1.851101, 5.517158, -5.732859, -2.609445, -3.096174, 4.912452, 6.063887, -3.437451, 3.69274, -3.605451, 1.232489, -2.079696, -6.156956, -12.627301, -2.653912, -9.403376, 6.187267, -7.009312, 1.426465, 2.354268, 13.137829, -1.513385, 1.865572, -2.245158, -1.734049,
		9.046621, 0.09795, 1.861298, 7.351871, 2.038119, 3.18997, 6.189089, -5.694032, -5.075033, 1.91387, 0.93456, 2.369358, -5.863577, 9.883272, -5.46806, 10.090362, 6.249078, -8.826975, -1.503641, -0.383029, -0.162688, 5.249866, 5.481645, -0.913089, 0.216337, 1.23373, 2.672131, -1.082941, 8.46119, -6.872625, -7.963487, 5.059411, 0.791236, -0.275506, 2.244496, 5.952722, 2.040639, -5.189912]
	elif i == 6:
		pawn_weights_L1 = [-4.907195, 0.38064, 0.737199, 2.421375, 0.227483, -1.555329, 2.195858, -3.171085, -3.227685, 6.735358, 2.38948, 2.221036, -2.427895, 6.704675, -2.976765, 4.467843, 2.513659, 0.606701, 4.393594, -11.822539, -5.237169, -6.226551, 3.830688, 0.031026, -7.521408, 1.326019, 1.222884, -7.613952, -5.734433, 3.478135, -6.125209, -1.455388, -9.187061, 2.018525, -3.854066, -5.02872, -5.026982, -10.528551,
		-0.566614, -7.094209, 1.798717, 0.6018, -0.525918, 4.433704, 5.908409, 3.745462, -4.892459, -5.848512, -9.18565, -2.465975, 5.471591, -1.442888, 2.90671, -7.747979, 5.576236, -7.462905, 1.232783, -7.924697, -6.037211, -3.658722, -0.757109, 0.65007, -8.001959, 0.624446, -7.408989, -7.829221, -8.33299, 0.992776, 13.839065, 9.297926, -1.157974, -8.503096, -4.952934, 6.425198, -9.880885, 9.627307]
	elif i == 7:
		pawn_weights_L1 = [-1.176332, 0.781582, 6.674708, 2.824502, 6.168986, -5.014109, 6.096216, 6.575892, 2.497201, -12.962639, 7.520135, -0.753565, 0.508552, -10.104391, 4.882384, 0.077712, 13.583043, -6.710316, 2.137681, 3.163692, 7.980974, -4.533607, 6.055604, 1.474476, -2.827158, -0.14609, -5.57688, -6.307848, -1.530206, 7.714194, 3.305523, -9.69736, -5.505079, 1.998898, 3.424626, 2.219721, 4.289741, 1.086762,
		0.886052, 5.103405, 0.665392, -3.666521, 1.657899, 2.351621, -8.032938, -0.262877, -1.854497, -3.840834, 0.837998, 10.301225, -6.613807, -14.543211, 0.884111, -2.01371, -2.597616, -4.575985, -5.237744, 1.702672, -0.223273, -1.427185, -1.442678, -10.12333, -3.430626, 7.415467, -6.485446, 1.767648, 4.981824, -1.200831, 9.1609, -0.492954, 1.144184, 7.290546, 0.561718, 0.045245, -5.046796, 0.538409]
	elif i == 8:
		pawn_weights_L1 = [-0.399811, -3.933485, -3.300813, -1.081674, 6.642872, -4.520264, -0.239317, -2.168178, 7.799822, 2.101999, 4.212402, 7.045112, -1.237805, -1.30438, 1.309323, -0.084549, 2.361873, 9.032535, 6.188164, -0.734181, 0.102052, -5.403651, 0.272424, 7.146606, -0.071641, 1.609984, 9.259432, -5.189845, -6.489464, -2.135501, -0.145337, -4.475531, 3.548853, 10.363689, 9.002615, 4.748903, 0.032402, 3.372575,
		-15.210885, -0.343905, 4.061457, -1.68125, 4.155946, -8.761439, -0.667969, 4.603359, 1.739911, -8.553721, 8.819965, 6.139189, 4.478591, -4.023705, -6.519357, 0.490733, 6.29788, -0.739864, -4.447902, -3.359166, 9.505096, 7.429872, -8.370378, 12.591792, 9.193539, 11.298675, -3.060878, 0.078457, -0.969902, -1.247134, -6.00908, -7.460656, 10.109034, 12.8505, 9.387571, 4.802519, -6.507457, -1.336429]
	elif i == 9:
		pawn_weights_L1 = [-0.929408, -4.045237, -0.996584, -4.455567, -1.054137, -3.016323, -3.121077, 0.933744, -10.654173, -7.810047, -8.032537, -6.834577, 1.175512, -7.385427, 9.215286, 1.378496, 1.967383, 4.644728, -5.905908, -0.784792, -4.598947, -2.564388, -28.43378, -6.561213, 4.898267, 4.91166, -9.015327, 6.891651, -6.414739, 6.0139, 19.713231, -3.557781, -4.857856, -3.27825, -1.679002, -3.212833, 0.268677, -0.906451,
		4.873181, -12.582197, 6.267719, -5.603277, 1.535193, 4.888388, 1.216472, 3.56583, -0.230281, 6.452384, -1.492675, -0.923495, -0.929689, 5.652037, 0.419565, 2.609541, -8.512164, 1.394896, 0.393392, 0.385825, -1.749384, -12.14785, -0.292748, 2.607237, -4.623644, 14.402471, -3.389411, -6.45192, 4.272236, 2.039646, -14.015586, -3.942221, 1.160076, 0.671227, 1.335188, -5.225098, 11.902958, 4.354963]
	elif i == 10:
		pawn_weights_L1 = [-3.996103, -3.872868, -6.553625, 1.544001, -0.107193, -6.194032, 2.587457, 4.714566, 10.031591, 7.802788, 2.114367, -4.383628, 6.518315, 3.586717, 4.601151, 7.978278, 4.763811, -7.045412, -1.642253, 2.26456, -1.556523, 0.422184, 0.003834, -4.895796, -0.538561, 1.118979, 2.553336, 12.802859, -0.931508, -5.848189, 3.897762, 7.843025, 4.395329, 3.310207, 3.588379, -2.552071, -6.110032, 2.709798,
		2.775919, -5.598456, -1.751338, 10.854728, 5.518698, -7.731811, 6.206144, -5.891611, -11.303309, 6.972536, 3.404811, -10.885099, -5.291604, -8.389936, 3.419693, -11.555966, -1.461835, -7.256977, 8.125353, -9.909324, 3.907609, 3.364314, -5.594877, -1.096389, -6.597693, 3.642736, 0.960997, -6.724649, 1.08738, 5.0571, -0.489379, 2.837595, 3.773898, -6.287855, -4.01475, 6.240891, -9.669608, -2.31306]
	elif i == 11:
		pawn_weights_L1 = [-7.496373, 1.191182, -2.933619, 4.283229, -5.334963, 7.847237, -1.548533, -4.759389, 6.542554, -9.234865, 3.295919, -2.821001, -5.823199, -6.134817, -3.406534, 6.611757, 4.020548, -0.024212, 5.814966, 0.77166, -0.16094, -8.144087, 7.580871, 4.553603, 2.283555, 4.033057, -4.657016, -5.296061, -1.949456, 1.913868, 3.104418, 6.928504, 5.706634, 1.192721, -3.437443, 2.996017, -6.321065, -1.18981,
		-2.654716, 4.738944, 4.803695, 5.47366, -2.554937, -6.309862, -0.64512, -4.281935, -1.248728, -3.27487, -1.535431, -2.624261, 2.834916, 0.656199, -4.471837, 2.374538, 5.948122, -6.338877, 2.845249, -5.683383, -7.568723, -5.784329, -3.168631, -1.681231, -1.213325, -7.672981, -0.580913, 2.477398, -3.736377, 9.338881, 0.641295, -1.274236, 2.390156, 1.760322, -0.495098, 6.605417, -6.078542, -0.245184]
	elif i == 12:
		pawn_weights_L1 = [-10.453224, 2.760916, -2.239637, 3.07339, -2.341267, -0.451965, 9.024926, 3.814839, 0.935112, -2.377557, -11.603229, -8.226771, 4.732601, 7.251928, 2.7556, -3.091075, -5.085866, 6.901548, -4.805692, -2.710491, -8.658053, 5.497063, -4.822098, 1.527648, -7.486348, 6.669021, 1.218037, 2.017449, -8.559564, 0.146229, -5.170201, 13.431052, 3.395166, -4.573996, 4.556567, 4.716272, -7.518496, 4.511186,
		1.755112, 3.067391, 17.981479, -1.879935, 3.727289, -3.255196, 9.819666, -1.048544, 0.069902, 3.877973, -5.667709, -1.495049, 0.425872, 8.283208, 5.008705, 10.258848, 1.633748, -1.576321, -2.078318, -6.335703, -4.565426, 2.567324, -7.545057, -9.924751, 5.235671, -0.891493, -1.079496, 6.395973, 4.696916, -13.032106, 4.20702, -1.318634, 1.457731, 4.223016, 3.351681, 2.546372, -22.786448, 1.783689]
	elif i == 13:
		pawn_weights_L1 = [-4.730577, -3.385959, -5.947173, 4.354212, -4.762721, 0.255322, 22.971478, 1.025971, 0.027492, 10.393394, 6.003746, 2.240525, 7.078647, -0.428459, 10.528252, -2.552681, -9.02321, -4.806854, 3.324484, -2.540387, 6.733108, -7.821083, -7.227373, 4.725273, 5.19307, -8.604437, 15.295783, 3.494626, -4.251111, 9.946961, 5.391725, -2.933873, -3.328641, -11.897525, 4.54643, 11.019688, -1.465152, -4.948398,
		0.036469, -10.677233, 6.780658, 8.600586, -3.976278, -1.984826, -3.080609, 4.584382, -8.346647, 2.221399, -2.719487, -0.400856, 10.939808, -7.392502, -4.626101, -2.092186, 5.350185, 7.929947, 9.027921, -4.544801, -1.959759, -5.386594, -0.596191, 2.145319, -3.661721, 3.730512, 8.14174, 9.808979, 1.543613, 8.092909, -3.950432, 2.870217, 4.212898, 2.298987, 3.876429, -3.724707, 6.334291, -3.144677]
	elif i == 14:
		pawn_weights_L1 = [2.263782, 1.077032, -8.341334, 1.537257, 3.3598, 2.049552, 0.389855, 2.449479, -12.189538, -2.280739, -8.326386, 5.11799, -4.170105, -9.201244, 0.714623, 5.948529, -4.91559, -2.925952, 4.617402, -0.065764, -1.687673, 4.759084, -0.981796, 5.026716, -2.561975, 9.099252, 1.520964, -7.950967, 8.052011, 4.154324, -3.033793, -8.424382, 1.557198, 5.46043, 2.773253, -4.887147, -14.501693, 17.289041,
		-2.97159, -5.57007, -4.839941, -3.636176, -5.50233, 2.662676, 0.098947, -8.335001, 3.629307, -8.422721, 3.540202, 5.248163, -1.388759, -2.973684, 2.701742, -1.094264, 11.018294, 5.858582, -0.588901, -2.666614, 3.652435, -2.900449, -10.146584, -1.326871, -4.63909, -3.925777, 10.43659, -6.097019, 9.138095, 3.506193, 9.066191, 6.933119, -0.086554, 7.625894, -9.367149, -0.089322, -6.787732, -1.592131]
	elif i == 15:
		pawn_weights_L1 = [8.752152, -2.593156, -2.024495, -6.787052, 9.030613, 4.988129, 10.894681, -4.460342, 0.222861, 5.860646, -2.010002, 0.18413, -1.441648, -10.515147, -2.25852, 5.155715, 1.910106, -9.974094, 0.95787, 6.661183, -9.131274, 3.108927, -3.788429, -9.027826, 3.258379, -0.601671, -1.791489, 4.077689, 6.801462, 2.791888, 2.627797, 4.370229, -3.843978, -9.708175, 2.620849, -7.830936, -1.143311, -3.282541,
		11.804437, -8.313103, 11.302533, 10.286486, 3.506338, 10.811249, -8.396378, 4.752249, 3.416036, 3.899948, -2.327144, -1.828371, 1.167758, 1.5903, -7.430247, -7.910754, -3.359387, -3.073203, 32.429128, -5.990784, 7.898258, -9.580715, -5.264562, -0.035663, -5.732071, 2.476875, 6.218746, 2.514253, 3.212505, 8.14519, 7.464663, -3.000152, -6.643683, 0.694839, 8.09712, 9.487344, 1.315557, -2.215316]
	elif i == 16:
		pawn_weights_L1 = [-0.430054, 8.983715, -4.298504, 0.172258, 1.723487, 6.15263, 4.584913, -8.327351, 0.716548, 4.14291, 7.990352, -3.256442, -0.864317, 12.008262, -0.946279, 5.074746, 5.858908, -5.205246, -5.080367, 9.740836, 5.734646, -8.664597, 0.031265, 0.601067, 2.206839, -2.356299, 1.595384, -1.927142, 2.491927, -9.532343, -7.73889, -4.244012, 6.533216, -0.020284, 1.293894, -6.557059, 6.598961, 8.653312,
		3.577611, -3.270418, 2.804177, 3.473811, -0.496873, -6.727445, -6.301216, 1.856794, -7.066886, -6.361347, -7.065594, 5.952675, -4.987768, -8.545564, -1.447217, -0.645271, -7.292111, 7.334306, 2.093731, -5.159578, 11.610055, 3.793654, 3.511136, 4.413828, -7.079347, 9.393512, 0.255356, -3.501549, 0.41653, -5.054349, -4.222468, -9.329778, 6.431126, 0.273726, 5.76048, 8.687413, 1.244354, -1.274026]
	elif i == 17:
		pawn_weights_L1 = [-7.027818, 9.394447, 3.079011, -0.611988, 0.075063, 0.323603, -5.345629, 0.868197, -1.398002, -0.036083, -0.879214, -0.902907, 2.432062, 2.050249, -1.918471, 2.964771, -3.302415, -4.082026, -12.592097, 1.814215, -4.382777, -2.493621, 8.093049, -5.912735, -0.876871, 0.23728, -7.366371, -5.294974, 7.62172, -0.927283, -16.728379, -4.545818, -4.003825, -1.852525, -1.215062, 6.4391, 3.497975, -1.595399,
		5.015157, 0.231118, 6.111317, -12.020441, -7.328676, -2.989869, 8.749782, 8.053069, -3.147892, -6.681526, 2.919932, 9.503626, -2.961173, -9.214579, 7.047521, 1.972844, -11.055001, -2.383732, 8.389316, -0.110818, 1.369318, 2.172489, 8.196487, 2.502423, 5.165711, 0.727904, 9.184151, 5.01578, 5.450832, 6.279473, 0.644272, -2.405206, -3.900201, 7.671064, 2.877308, 1.905716, -2.545183, 4.066433]
	elif i == 18:
		pawn_weights_L1 = [-7.580964, -0.437304, 4.075996, 7.08675, 7.656404, 2.134504, 7.844378, 6.016103, -0.23257, 14.213426, -6.19029, 7.218496, -0.24269, -7.233072, -1.813223, 8.352675, 8.421008, -9.708014, 12.029227, 7.154523, 7.627657, 0.964967, 7.670452, -2.356251, 5.242395, -0.235781, -5.862022, -4.266406, 9.759773, 10.307927, 3.187367, -6.953324, 3.656882, 0.018367, -8.004643, 3.771992, -8.492582, 5.960863,
		-7.318098, 0.269972, -18.578638, -1.66929, 9.481358, -8.391155, -5.509598, 1.386397, -0.453781, 8.465355, -6.266858, 9.720698, 5.133613, -2.663736, 9.582218, -3.514253, 0.775958, -1.307685, -7.534872, -0.310226, -0.550541, 7.434765, -2.307582, 16.008238, -1.639928, -2.590159, -6.273559, -7.080822, -6.673971, -0.304891, -3.355677, -9.582834, -1.615676, 12.405656, 2.967108, 4.088086, -3.417452, 7.483439]
	elif i == 19:
		pawn_weights_L1 = [-4.424665, -4.053568, -9.459415, 0.767667, 0.069756, -1.555286, -8.096731, -10.149555, 12.849218, 0.492904, -6.041502, 3.762415, -3.606807, -1.215985, -11.900263, 0.280957, -8.426547, -0.381603, 4.386871, 2.482779, 1.266508, -8.966403, 3.984715, 3.012576, 5.385706, 7.045183, -0.646915, 13.40061, -7.638789, -1.853691, 4.52629, -7.006102, -11.120882, -1.281604, 1.422613, 2.669671, -4.208579, 9.526028,
		-2.954497, 2.940665, 6.944199, 4.761516, -1.118219, -11.656356, -7.239181, 4.129958, 2.136622, 1.04776, 7.544064, 6.156361, -10.295852, -0.997763, -5.720535, 4.200645, 8.285673, -3.673008, -5.761527, -1.377843, -4.320207, -7.335824, -6.907288, -0.377078, -1.841058, -2.911591, -4.847301, 10.727922, 3.024146, -3.017485, -6.550708, 9.086975, 10.028596, -2.774412, -5.337244, -0.377671, -7.763848, -2.046284]
	return pawn_weights_L1

def pawn_turn():
	global row,col
	
	row, col = get_location()

	first_layer = []
	if team == Team.WHITE:
		for i in range(-sensor_radius, sensor_radius+1):
			to_print = ""
			for j in range(-sensor_radius, sensor_radius+1):
				if i == 0 and j == 0:
					continue
				pawn = check_space_wrapper(row+i, col+j)
				to_print=to_print+" "+str(pawn)
				if pawn == team:
					first_layer.append(1)
					first_layer.append(0)
					first_layer.append(0)
				elif pawn == opp_team:
					first_layer.append(0)
					first_layer.append(1)
					first_layer.append(0)
				else:
					first_layer.append(0)
					first_layer.append(0)
					first_layer.append(1)
	else:
		for i in range(sensor_radius, -sensor_radius-1, -1):
			to_print = ""
			for j in range(sensor_radius, -sensor_radius-1, -1):
				if i == 0 and j == 0:
					continue
				pawn = check_space_wrapper(row+i, col+j)
				to_print=to_print+" "+str(pawn)
				if pawn == team:
					first_layer.append(1)
					first_layer.append(0)
					first_layer.append(0)
				elif pawn == opp_team:
					first_layer.append(0)
					first_layer.append(1)
					first_layer.append(0)
				else:
					first_layer.append(0)
					first_layer.append(0)
					first_layer.append(1)

	first_layer.append(dist_to_side(col))
	first_layer.append(abs(row-backRow))
	if col == 0 or col == board_size-1:
		first_layer.append(1)
	else:
		first_layer.append(0)
	if col == 1 or col == board_size-2:
		first_layer.append(1)
	else:
		first_layer.append(0)

	second_layer = []
	second_layer_len = 20
	#test_weights = [[random.randint(0,10) for x in range(len(first_layer))] for y in range(second_layer_len)]

	for i in range(second_layer_len):
		value = pawn_bias_L1[i]
		pawn_weights_L1 = pawn_weights_L1_generator(i)

		
		for j in range(len(first_layer)):
			value += first_layer[j] * pawn_weights_L1[j]
		second_layer.append(value)
		#del pawn_weights_L1[:]
	#dlog('Second layer values: ' + str(second_layer))

	#third layer
	output_layer = []
	output_layer_len = 2

	for i in range(output_layer_len):
		tempValue = pawn_bias_L2[i]
		for j in range(second_layer_len):
			dlog(str(i)+" "+ str(j))
			try:
				tempValue += second_layer[j] * pawn_weights_L2[j][i]
			except:
				hello = "hello"
		output_layer.append(tempValue)
	#dlog('Output layer values: ' + str(output_layer))
	log(str(output_layer[0])+" "+str(output_layer[1]))
	if check_right(): # up and right
		capture_right()

	elif check_left(): # up and left
		capture_left()

	# otherwise try to move forward
	elif can_move_forward() and output_layer[0] > output_layer[1]:
		#if row < whiteHalfway:
		move_forward()

	confusion = "you need a line here to avoid segfault. we aren't sure why but are working on it"
	# ^ I think this is related to the potential ambiguity of what the following else is referring to?

##############################################################
########################## OVERLORD ##########################
##############################################################

def overlord_init():
	global backRow
	if team == Team.WHITE:
		backRow = 0
	else:
		backRow = board_size - 1

def spawn_weights_pro_plus_max_xyz(board):
	weights = []
	for tempCol in range(board_size):
		weights.append(0)

		weight_index = dist_to_side(tempCol) # different weights depending on how far away from the wall
		if weight_index > 2:
			weight_index = 2 #limit is 2 away

		#check same col
		for tempRow in range(board_size):
			pawn = board[tempRow][tempCol]
			if pawn != None: # there is a pawn
				distance = abs(tempRow-backRow) # distance to pawn from your back row
				if pawn == team: # your pawn
					weights[tempCol] = weights[tempCol] + overlord_weights_same_allied[weight_index][distance]
				else: # enemy pawn
					weights[tempCol] = weights[tempCol] + overlord_weights_adjacent_allied[weight_index][distance]

		#check left adjacent col
		if tempCol > 0:
			for tempRow in range(board_size):
				pawn = board[tempRow][tempCol-1]
				if pawn != None: # there is a pawn
					distance = abs(tempRow-backRow) # distance to pawn from your back row
					if pawn == team: # your pawn
						weights[tempCol] = weights[tempCol] + overlord_weights_same_enemy[weight_index][distance]
					else: # enemy pawn
						weights[tempCol] = weights[tempCol] + overlord_weights_adjacent_enemy[weight_index][distance]

		#check right adjacent col
		if tempCol < board_size-1:
			for tempRow in range(board_size):
				pawn = board[tempRow][tempCol+1]
				if pawn != None: # there is a pawn
					distance = abs(tempRow-backRow) # distance to pawn from your back row
					if pawn == team: # your pawn
						weights[tempCol] = weights[tempCol] + overlord_weights_same_enemy[weight_index][distance]
					else: # enemy pawn
						weights[tempCol] = weights[tempCol] + overlord_weights_adjacent_enemy[weight_index][distance]
	return weights

def spawn_weights(board):
	weights = []
	for tempCol in range(board_size):
		weights.append(0)

		#check same col
		for tempRow in range(board_size):
			pawn = board[tempRow][tempCol]
			if pawn != None: # there is a pawn
				distance = abs(tempRow-backRow) # distance to pawn from your back row
				if pawn == team: # your pawn
					weights[tempCol] = weights[tempCol] + sameRowAlliedPawnWeight + sameRowAlliedPawnDistanceMultiplier * distance
				else: # enemy pawn
					weights[tempCol] = weights[tempCol] + sameRowEnemyPawnWeight + sameRowEnemyPawnDistanceMultiplier * distance

		#check left adjacent col
		if tempCol > 0:
			for tempRow in range(board_size):
				pawn = board[tempRow][tempCol-1]
				if pawn != None: # there is a pawn
					distance = abs(tempRow-backRow) # distance to pawn from your back row
					if pawn == team: # your pawn
						weights[tempCol] = weights[tempCol] + adjacentRowAlliedPawnWeight + adjacentRowAlliedPawnDistanceMultiplier * distance
					else: # enemy pawn
						weights[tempCol] = weights[tempCol] + adjacentRowEnemyPawnWeight + adjacentRowEnemyPawnDistanceMultiplier * distance

		#check right adjacent col
		if tempCol < board_size-1:
			for tempRow in range(board_size):
				pawn = board[tempRow][tempCol+1]
				if pawn != None: # there is a pawn
					distance = abs(tempRow-backRow) # distance to pawn from your back row
					if pawn == team: # your pawn
						weights[tempCol] = weights[tempCol] + adjacentRowAlliedPawnWeight + adjacentRowAlliedPawnDistanceMultiplier * distance
					else: # enemy pawn
						weights[tempCol] = weights[tempCol] + adjacentRowEnemyPawnWeight + adjacentRowEnemyPawnDistanceMultiplier * distance
		
		if board[backRow+forward][tempCol] == opp_team: # if opponent pawn is one tile away from back row
			weights[tempCol] = weights[tempCol] + enemyOneTileAwayWeight 
		
		if board[backRow+forward*2][tempCol] == opp_team: # if opponent pawn is two tiles away from back row
			weights[tempCol] = weights[tempCol] + enemyTwoTilesAwayWeight 

		if tempCol > 0 and board[backRow+forward][tempCol-1] == opp_team: # if opponent pawn is one tile away from back row and one to the left:
			weights[tempCol] = weights[tempCol] + enemyOneAdjacentTileAwayWeight

		if tempCol < board_size-1 and board[backRow+forward][tempCol+1] == opp_team: # if opponent pawn is one tile away from back row and one to the right:
			weights[tempCol] = weights[tempCol] + enemyOneAdjacentTileAwayWeight

	return weights

def maxIndex(list):
	maxNum = list[0]
	maxIndex = 0
	for i in range(len(list)):
		if list[i] > maxNum:
			maxIndex = i
			maxNum = list[i]
	return maxIndex

def overlord_turn():
	board = get_board()
	weights = spawn_weights_pro_plus_max_xyz(board)
	
	debug = ''
	for i in range(board_size):
		debug = debug + str(weights[i]) + ' '
	dlog(debug)

	for i in range(board_size):
		maxWeightCol = maxIndex(weights)
		if not check_space(backRow, maxWeightCol):
			spawn(backRow, maxWeightCol)
			break
		else:
			weights[maxWeightCol] = -100000

	# for tempCol in range(board_size):
	# 	for tempRow in range(board_size):
	# 		temp = board[tempCol][tempRow]
	# 		if temp == opp_team:
	# 			allied_list.append(0)
	# 			enemy_list.append(1)
	# 		elif temp == team:
	# 			allied_list.append(1)
	# 			enemy_list.append(0)
	# 		else:
	# 			allied_list.append(0)
	# 			enemy_list.append(0)



	# for _ in range(board_size):
	# 	i = random.randint(0, board_size - 1)
	# 	if not check_space(backRow, i):
	# 		spawn(backRow, i)
	# 		break

# python -i run.py ml_test weights --raw-text
